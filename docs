# Backlog
## 1st iteration - account viewer
1. Reasearch How to access banking in general, specifically banking-oberbank.at
2. establish secure read connecting to ebanking portal
2.a. NF: As little logins as possible
2.b. Check feasibility of oAuth/Web
3. Fetch banking records for given timeframe
3.a. Last month (01-31 of last month) should be supported
3.b. Last n month should be supported
3.b.1 View: Group by month
3.c current month (01-now)
4. UI for banking records
4.a. Based on outcome of #3 define table view mock for 4.b 
4.b. Table view showing relevant info (amount, recipient/sender, )

## 2nd iteration - balance observability
This iteration will focus on the monitoring of financial plans vs actuals. Specificially it should allow the user to define a household plan. The household plan can be compared with the actuals from the account viewer.
In a second step dashboarding and alerting should come into play

# External links
## PSD 2
[Payment service directives (eur-lex)](https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=celex%3A32015L2366) 

[Nederlandishe Bank](https://www.dnb.nl/en/innovations-in-payments-and-banking/fintech-ai-and-innovation/everything-you-should-know-about-psd2/#:~:text=The%20revised%20Payment%20Services%20Directive,in%20the%20European%20payments%20market)

## XS2A
[FinApi](https://www.finapi.io/en/products/open-banking/xs2a-api-for-banks/)

[Oberbank](https://www.oberbank.at/xs2a-schnittstelle)

[Oberbank Sandbox](https://xs2a-sandbox.3bankenit.at/api-docs/index.html#overview)

[FinApi pip](https://pypi.org/project/finapi/)

# Database setup
If you haven't set up a database or a user yet, you'll need to do so first. Here are the steps to set up a PostgreSQL database and user within your Docker container:

1. **Access the Docker container's shell**: Run the following command to access the shell of your PostgreSQL Docker container:

   ```bash
   docker exec -it container_id_or_name bash
   ```

   Replace `container_id_or_name` with the ID or name of your PostgreSQL container.

2. **Log in to PostgreSQL**: Once inside the container's shell, you can log in to the PostgreSQL database server by running the following command:

   ```bash
   psql -U postgres
   ```

   This command connects to the PostgreSQL server using the default `postgres` user.

3. **Create a new database**: Inside the PostgreSQL prompt, you can create a new database by running the following SQL command:

   ```sql
   CREATE DATABASE your_database_name;
   ```

   Replace `your_database_name` with the desired name for your database.

4. **Create a new user**: You can create a new user and grant them privileges on the database by running the following SQL commands:

   ```sql
   CREATE USER your_username WITH PASSWORD 'your_password';
   GRANT ALL PRIVILEGES ON DATABASE your_database_name TO your_username;
   ```

   Replace `your_username` with the desired username and `your_password` with the desired password.

5. **Exit psql**: Once you've created the database and user, you can exit the PostgreSQL prompt by typing:

   ```sql
   \q
   ```

6. **Exit the container's shell**: Finally, exit the container's shell by typing:

   ```bash
   exit
   ```

Now that you have set up the database and user, you can connect to it using `psql` as mentioned earlier, providing the appropriate database name, username, and password.
